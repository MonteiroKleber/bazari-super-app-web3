// ==========================================
// src/features/p2p/services/payments.ts - COMPLETO
// ==========================================

import type { PaymentMethod } from '../types/p2p.types'

/**
 * Informa√ß√µes de um m√©todo de pagamento
 */
export interface PaymentMethodInfo {
  id: PaymentMethod
  label: string
  description: string
  icon: string
  color: string
  instantTransfer: boolean
  workingHours?: string
  maxAmount?: number
  minAmount?: number
  processingTime: string
  fees?: string
  requirements?: string[]
  risks?: string[]
  tips?: string[]
}

/**
 * Dados de valida√ß√£o para m√©todo de pagamento
 */
export interface PaymentValidationData {
  method: PaymentMethod
  accountData: Record<string, any>
  isValid: boolean
  errors: string[]
}

/**
 * Cat√°logo completo de m√©todos de pagamento
 */
const PAYMENT_METHODS: Record<PaymentMethod, PaymentMethodInfo> = {
  PIX: {
    id: 'PIX',
    label: 'PIX',
    description: 'Transfer√™ncia instant√¢nea via PIX',
    icon: '‚ö°',
    color: 'text-green-600 bg-green-50 border-green-200',
    instantTransfer: true,
    processingTime: 'Instant√¢neo (24h/dia)',
    fees: 'Gratuito na maioria dos bancos',
    requirements: [
      'Conta banc√°ria ou carteira digital',
      'Chave PIX cadastrada'
    ],
    tips: [
      'Sempre confirme a chave PIX antes de enviar',
      'Guarde o comprovante da transa√ß√£o',
      'Transfer√™ncias s√£o instant√¢neas e irrevers√≠veis'
    ]
  },
  
  TED: {
    id: 'TED',
    label: 'TED',
    description: 'Transfer√™ncia Eletr√¥nica Dispon√≠vel',
    icon: 'üè¶',
    color: 'text-blue-600 bg-blue-50 border-blue-200',
    instantTransfer: false,
    workingHours: 'Segunda a sexta: 6h √†s 17h30',
    processingTime: 'At√© 30 minutos (dias √∫teis)',
    minAmount: 5,
    fees: 'R$ 8 a R$ 25 dependendo do banco',
    requirements: [
      'Conta banc√°ria',
      'Dados banc√°rios completos do destinat√°rio'
    ],
    risks: [
      'N√£o funciona fora do hor√°rio banc√°rio',
      'Pode ser cobrada taxa'
    ],
    tips: [
      'Confira os dados banc√°rios cuidadosamente',
      'Considere usar PIX se dispon√≠vel',
      'Guarde o comprovante'
    ]
  },
  
  DOC: {
    id: 'DOC',
    label: 'DOC',
    description: 'Documento de Ordem de Cr√©dito',
    icon: 'üìÑ',
    color: 'text-orange-600 bg-orange-50 border-orange-200',
    instantTransfer: false,
    workingHours: 'Segunda a sexta: 6h √†s 22h',
    processingTime: 'At√© 1 dia √∫til',
    maxAmount: 5000,
    fees: 'R$ 3 a R$ 15 dependendo do banco',
    requirements: [
      'Conta banc√°ria',
      'Dados banc√°rios completos do destinat√°rio'
    ],
    risks: [
      'Demora para compensar',
      'Limite de valor baixo'
    ],
    tips: [
      'Prefira PIX ou TED se dispon√≠vel',
      'Verifique o limite de valor'
    ]
  },
  
  DINHEIRO: {
    id: 'DINHEIRO',
    label: 'Dinheiro',
    description: 'Pagamento em esp√©cie (presencial)',
    icon: 'üíµ',
    color: 'text-green-600 bg-green-50 border-green-200',
    instantTransfer: true,
    processingTime: 'Imediato (encontro presencial)',
    fees: 'Gratuito',
    requirements: [
      'Encontro presencial',
      'Local p√∫blico e seguro'
    ],
    risks: [
      'Risco de seguran√ßa pessoal',
      'Possibilidade de dinheiro falso',
      'Sem rastro digital'
    ],
    tips: [
      'Sempre se encontre em local p√∫blico',
      'Leve acompanhante se poss√≠vel',
      'Verifique a autenticidade das notas',
      'Considere usar detector de notas falsas'
    ]
  },
  
  CARTAO: {
    id: 'CARTAO',
    label: 'Cart√£o',
    description: 'Pagamento com cart√£o de d√©bito/cr√©dito',
    icon: 'üí≥',
    color: 'text-purple-600 bg-purple-50 border-purple-200',
    instantTransfer: false,
    processingTime: '1-3 dias √∫teis',
    fees: '2-5% de taxa da operadora',
    requirements: [
      'Maquininha de cart√£o',
      'Encontro presencial ou sistema online'
    ],
    risks: [
      'Possibilidade de estorno',
      'Taxas de processamento',
      'Demora na compensa√ß√£o'
    ],
    tips: [
      'Use apenas em transa√ß√µes de confian√ßa',
      'Verifique as taxas aplic√°veis',
      'Guarde o comprovante'
    ]
  },
  
  OUTRO: {
    id: 'OUTRO',
    label: 'Outro',
    description: 'M√©todo de pagamento personalizado',
    icon: 'üîÑ',
    color: 'text-gray-600 bg-gray-50 border-gray-200',
    instantTransfer: false,
    processingTime: 'Vari√°vel',
    fees: 'A combinar',
    requirements: [
      'Acordo entre as partes'
    ],
    risks: [
      'M√©todo n√£o padronizado',
      'Maior risco de problemas'
    ],
    tips: [
      'Defina claramente os termos',
      'Use apenas com usu√°rios confi√°veis',
      'Documente o acordo'
    ]
  }
}

/**
 * M√©todos de pagamento habilitados na plataforma
 */
const ENABLED_PAYMENT_METHODS: PaymentMethod[] = ['PIX', 'TED', 'DINHEIRO']

/**
 * Obt√©m informa√ß√µes de um m√©todo de pagamento
 */
export function getPaymentMethodInfo(method: PaymentMethod): PaymentMethodInfo {
  return PAYMENT_METHODS[method]
}

/**
 * Obt√©m todos os m√©todos de pagamento habilitados
 */
export function getEnabledPaymentMethods(): PaymentMethodInfo[] {
  return ENABLED_PAYMENT_METHODS.map(method => PAYMENT_METHODS[method])
}

/**
 * Obt√©m m√©todos recomendados baseado no valor da transa√ß√£o
 */
export function getRecommendedPaymentMethods(amountBRL: number): PaymentMethodInfo[] {
  const enabled = getEnabledPaymentMethods()
  
  return enabled
    .filter(method => {
      // Filtrar por valor se houver limites
      if (method.minAmount && amountBRL < method.minAmount) return false
      if (method.maxAmount && amountBRL > method.maxAmount) return false
      return true
    })
    .sort((a, b) => {
      // Priorizar m√©todos instant√¢neos
      if (a.instantTransfer && !b.instantTransfer) return -1
      if (!a.instantTransfer && b.instantTransfer) return 1
      
      // Priorizar PIX
      if (a.id === 'PIX') return -1
      if (b.id === 'PIX') return 1
      
      return 0
    })
}

/**
 * Verifica se um m√©todo de pagamento est√° dispon√≠vel no hor√°rio atual
 */
export function isPaymentMethodAvailable(method: PaymentMethod): boolean {
  const info = getPaymentMethodInfo(method)
  
  // M√©todos instant√¢neos sempre dispon√≠veis
  if (info.instantTransfer) return true
  
  // Se n√£o tem hor√°rio definido, assumir sempre dispon√≠vel
  if (!info.workingHours) return true
  
  const now = new Date()
  const dayOfWeek = now.getDay() // 0 = domingo, 1 = segunda, etc.
  const hour = now.getHours()
  
  // L√≥gica espec√≠fica por m√©todo
  switch (method) {
    case 'TED':
      // Segunda a sexta, 6h √†s 17h30
      return dayOfWeek >= 1 && dayOfWeek <= 5 && hour >= 6 && hour < 17
      
    case 'DOC':
      // Segunda a sexta, 6h √†s 22h
      return dayOfWeek >= 1 && dayOfWeek <= 5 && hour >= 6 && hour < 22
      
    default:
      return true
  }
}

/**
 * Valida dados de um m√©todo de pagamento
 */
export function validatePaymentData(
  method: PaymentMethod, 
  data: Record<string, any>
): PaymentValidationData {
  const errors: string[] = []
  
  switch (method) {
    case 'PIX':
      if (!data.pixKey) {
        errors.push('Chave PIX √© obrigat√≥ria')
      } else {
        // Valida√ß√µes b√°sicas de chave PIX
        const key = data.pixKey.trim()
        if (key.length === 0) {
          errors.push('Chave PIX n√£o pode estar vazia')
        }
        // Aqui poderia ter valida√ß√µes mais espec√≠ficas (email, telefone, CPF, etc.)
      }
      break
      
    case 'TED':
    case 'DOC':
      if (!data.bank) errors.push('Banco √© obrigat√≥rio')
      if (!data.agency) errors.push('Ag√™ncia √© obrigat√≥ria')
      if (!data.account) errors.push('Conta √© obrigat√≥ria')
      if (!data.accountType) errors.push('Tipo de conta √© obrigat√≥rio')
      if (!data.holderName) errors.push('Nome do titular √© obrigat√≥rio')
      if (!data.holderDocument) errors.push('CPF/CNPJ do titular √© obrigat√≥rio')
      break
      
    case 'DINHEIRO':
      if (!data.meetingLocation) {
        errors.push('Local de encontro √© obrigat√≥rio')
      }
      if (!data.meetingTime) {
        errors.push('Hor√°rio de encontro √© obrigat√≥rio')
      }
      break
      
    case 'CARTAO':
      if (!data.cardBrand) errors.push('Bandeira do cart√£o √© obrigat√≥ria')
      if (!data.processingMethod) errors.push('M√©todo de processamento √© obrigat√≥rio')
      break
      
    default:
      // Para 'OUTRO', valida√ß√£o customizada
      if (!data.description) {
        errors.push('Descri√ß√£o do m√©todo √© obrigat√≥ria')
      }
      break
  }
  
  return {
    method,
    accountData: data,
    isValid: errors.length === 0,
    errors
  }
}

/**
 * Formata dados de pagamento para exibi√ß√£o
 */
export function formatPaymentData(method: PaymentMethod, data: Record<string, any>): string {
  switch (method) {
    case 'PIX':
      return `PIX: ${data.pixKey}`
      
    case 'TED':
    case 'DOC':
      return `${method}: ${data.bank} - Ag: ${data.agency} - Conta: ${data.account}`
      
    case 'DINHEIRO':
      return `Dinheiro: ${data.meetingLocation}`
      
    case 'CARTAO':
      return `Cart√£o: ${data.cardBrand}`
      
    default:
      return data.description || 'M√©todo personalizado'
  }
}

/**
 * Obt√©m √≠cone do m√©todo de pagamento
 */
export function getPaymentMethodIcon(method: PaymentMethod): string {
  return getPaymentMethodInfo(method).icon
}

/**
 * Obt√©m cor CSS do m√©todo de pagamento
 */
export function getPaymentMethodColor(method: PaymentMethod): string {
  return getPaymentMethodInfo(method).color
}

/**
 * Verifica se o m√©todo √© instant√¢neo
 */
export function isInstantPaymentMethod(method: PaymentMethod): boolean {
  return getPaymentMethodInfo(method).instantTransfer
}

/**
 * Obt√©m tempo estimado de processamento
 */
export function getProcessingTime(method: PaymentMethod): string {
  return getPaymentMethodInfo(method).processingTime
}

/**
 * Gera dados mock para teste de um m√©todo de pagamento
 */
export function generateMockPaymentData(method: PaymentMethod): Record<string, any> {
  switch (method) {
    case 'PIX':
      return {
        pixKey: 'usuario@email.com',
        keyType: 'email'
      }
      
    case 'TED':
    case 'DOC':
      return {
        bank: '341 - Ita√∫',
        agency: '1234',
        account: '56789-0',
        accountType: 'conta_corrente',
        holderName: 'Jo√£o Silva',
        holderDocument: '123.456.789-00'
      }
      
    case 'DINHEIRO':
      return {
        meetingLocation: 'Shopping Center - Pra√ßa de Alimenta√ß√£o',
        meetingTime: '14:00',
        meetingDate: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString().split('T')[0]
      }
      
    case 'CARTAO':
      return {
        cardBrand: 'Visa',
        processingMethod: 'presencial',
        fees: '3.5%'
      }
      
    default:
      return {
        description: 'M√©todo de pagamento personalizado',
        instructions: 'Entrar em contato para combinar detalhes'
      }
  }
}

/**
 * Obt√©m lista de bancos brasileiros para formul√°rios
 */
export function getBrazilianBanks(): Array<{ code: string; name: string }> {
  return [
    { code: '001', name: 'Banco do Brasil' },
    { code: '341', name: 'Ita√∫' },
    { code: '237', name: 'Bradesco' },
    { code: '104', name: 'Caixa Econ√¥mica Federal' },
    { code: '033', name: 'Santander' },
    { code: '260', name: 'Nu Pagamentos (Nubank)' },
    { code: '323', name: 'Mercado Pago' },
    { code: '290', name: 'PagSeguro' },
    { code: '077', name: 'Banco Inter' },
    { code: '212', name: 'Banco Original' },
    { code: '336', name: 'Banco C6' },
    { code: '364', name: 'Gerencianet' },
    { code: '380', name: 'PicPay' }
  ]
}

/**
 * Obt√©m tipos de conta banc√°ria
 */
export function getAccountTypes(): Array<{ value: string; label: string }> {
  return [
    { value: 'conta_corrente', label: 'Conta Corrente' },
    { value: 'conta_poupanca', label: 'Conta Poupan√ßa' },
    { value: 'conta_pagamento', label: 'Conta de Pagamento' }
  ]
}